"use strict";(self.webpackChunkmybase=self.webpackChunkmybase||[]).push([[2313],{35301:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>d,default:()=>x,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u94fe\u8868","title":"\u94fe\u8868","description":"203.\u79fb\u9664\u94fe\u8868\u5143\u7d20","source":"@site/docs/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u94fe\u8868.md","sourceDirName":"\u7801\u519c/\u5237\u9898\u8bb0\u5f55","slug":"/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u94fe\u8868","permalink":"/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u94fe\u8868","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"someSidebar","previous":{"title":"\u6570\u7ec4","permalink":"/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u6570\u7ec4"},"next":{"title":"\u54c8\u5e0c\u8868","permalink":"/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u54c8\u5e0c\u8868"}}');var t=r(74848),s=r(28453);const l={},d="\u94fe\u8868",a={},o=[{value:"203.\u79fb\u9664\u94fe\u8868\u5143\u7d20",id:"203\u79fb\u9664\u94fe\u8868\u5143\u7d20",level:2},{value:"707.\u8bbe\u8ba1\u94fe\u8868",id:"707\u8bbe\u8ba1\u94fe\u8868",level:2},{value:"206.\u53cd\u8f6c\u94fe\u8868",id:"206\u53cd\u8f6c\u94fe\u8868",level:2},{value:"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",level:2},{value:"19.\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9",id:"19\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9",level:2},{value:"\u9762\u8bd5\u9898 02.07. \u94fe\u8868\u76f8\u4ea4",id:"\u9762\u8bd5\u9898-0207-\u94fe\u8868\u76f8\u4ea4",level:2},{value:"142.\u73af\u5f62\u94fe\u8868II",id:"142\u73af\u5f62\u94fe\u8868ii",level:2},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"\u94fe\u8868",children:"\u94fe\u8868"})}),"\n",(0,t.jsx)(e.h2,{id:"203\u79fb\u9664\u94fe\u8868\u5143\u7d20",children:"203.\u79fb\u9664\u94fe\u8868\u5143\u7d20"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/remove-linked-list-elements/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,t.jsx)(e.p,{children:"\u9898\u610f\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [1,2,6,3,4,5,6], val = 6 \u8f93\u51fa\uff1a[1,2,3,4,5]"}),"\n",(0,t.jsx)(e.p,{children:"\u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [], val = 1 \u8f93\u51fa\uff1a[]"}),"\n",(0,t.jsx)(e.p,{children:"\u793a\u4f8b 3\uff1a \u8f93\u5165\uff1ahead = [7,7,7,7], val = 7 \u8f93\u51fa\uff1a[]"}),"\n",(0,t.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\n//\u7528\u539f\u6765\u7684\u94fe\u8868\u64cd\u4f5c\uff1a\r\nclass Solution {\r\n    public ListNode removeElements(ListNode head, int val) {\r\n        while(head != null && head.val == val){\r\n            head = head.next;\r\n        }\r\n        ListNode node = head;\r\n        while(node != null && node.next != null){\r\n            if(node.next.val == val){\r\n                node.next = node.next.next;\r\n            } else{\r\n                node = node.next;\r\n            }\r\n        }\r\n        return head;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"//\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\uff1a\r\nclass Solution {\r\n    public ListNode removeElements(ListNode head, int val) {\r\n        ListNode dummy = new ListNode();\r\n        dummy.next = head; //\u865a\u62df\u5934\u7ed3\u70b9\r\n        ListNode node = dummy;\r\n        while(node.next != null){\r\n            if(node.next.val == val){\r\n                node.next = node.next.next;\r\n            } else{\r\n                node = node.next;\r\n            }\r\n        }\r\n        return dummy.next;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"707\u8bbe\u8ba1\u94fe\u8868",children:"707.\u8bbe\u8ba1\u94fe\u8868"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/design-linked-list/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\u9898\u610f\uff1a"})}),"\n",(0,t.jsx)(e.p,{children:"\u5728\u94fe\u8868\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff1a"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"get(index)\uff1a\u83b7\u53d6\u94fe\u8868\u4e2d\u7b2c index \u4e2a\u8282\u70b9\u7684\u503c\u3002\u5982\u679c\u7d22\u5f15\u65e0\u6548\uff0c\u5219\u8fd4\u56de-1\u3002"}),"\n",(0,t.jsx)(e.li,{children:"addAtHead(val)\uff1a\u5728\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a val \u7684\u8282\u70b9\u3002\u63d2\u5165\u540e\uff0c\u65b0\u8282\u70b9\u5c06\u6210\u4e3a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002"}),"\n",(0,t.jsx)(e.li,{children:"addAtTail(val)\uff1a\u5c06\u503c\u4e3a val \u7684\u8282\u70b9\u8ffd\u52a0\u5230\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002"}),"\n",(0,t.jsx)(e.li,{children:"addAtIndex(index,val)\uff1a\u5728\u94fe\u8868\u4e2d\u7684\u7b2c index \u4e2a\u8282\u70b9\u4e4b\u524d\u6dfb\u52a0\u503c\u4e3a val \u7684\u8282\u70b9\u3002\u5982\u679c index \u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5219\u8be5\u8282\u70b9\u5c06\u9644\u52a0\u5230\u94fe\u8868\u7684\u672b\u5c3e\u3002\u5982\u679c index \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u4e0d\u4f1a\u63d2\u5165\u8282\u70b9\u3002\u5982\u679cindex\u5c0f\u4e8e0\uff0c\u5219\u5728\u5934\u90e8\u63d2\u5165\u8282\u70b9\u3002"}),"\n",(0,t.jsx)(e.li,{children:"deleteAtIndex(index)\uff1a\u5982\u679c\u7d22\u5f15 index \u6709\u6548\uff0c\u5219\u5220\u9664\u94fe\u8868\u4e2d\u7684\u7b2c index \u4e2a\u8282\u70b9\u3002"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\u793a\u4f8b\uff1a"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'\u8f93\u5165\r\n["MyLinkedList", "addAtHead", "addAtTail", "addAtIndex", "get", "deleteAtIndex", "get"]\r\n[[], [1], [3], [1, 2], [1], [1], [1]]\r\n\u8f93\u51fa\r\n[null, null, null, null, 2, null, 3]\r\n\r\n\u89e3\u91ca\r\nMyLinkedList myLinkedList = new MyLinkedList();\r\nmyLinkedList.addAtHead(1);\r\nmyLinkedList.addAtTail(3);\r\nmyLinkedList.addAtIndex(1, 2);    // \u94fe\u8868\u53d8\u4e3a 1->2->3\r\nmyLinkedList.get(1);              // \u8fd4\u56de 2\r\nmyLinkedList.deleteAtIndex(1);    // \u73b0\u5728\uff0c\u94fe\u8868\u53d8\u4e3a 1->3\r\nmyLinkedList.get(1);              // \u8fd4\u56de 3\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"\u63d0\u793a\uff1a"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"0 <= index, val <= 1000"})}),"\n",(0,t.jsx)(e.li,{children:"\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684 LinkedList \u5e93\u3002"}),"\n",(0,t.jsxs)(e.li,{children:["\u8c03\u7528 ",(0,t.jsx)(e.code,{children:"get"}),"\u3001",(0,t.jsx)(e.code,{children:"addAtHead"}),"\u3001",(0,t.jsx)(e.code,{children:"addAtTail"}),"\u3001",(0,t.jsx)(e.code,{children:"addAtIndex"})," \u548c ",(0,t.jsx)(e.code,{children:"deleteAtIndex"})," \u7684\u6b21\u6570\u4e0d\u8d85\u8fc7 ",(0,t.jsx)(e.code,{children:"2000"})," \u3002"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"//\u5355\u94fe\u8868\r\nclass ListNode{\r\n    int val;\r\n    ListNode next;\r\n    ListNode(){}\r\n    ListNode(int val){\r\n        this.val = val;\r\n    }\r\n    ListNode(int val,ListNode next){\r\n        this.val = val;\r\n        this.next = next;\r\n    }\r\n}\r\nclass MyLinkedList {\r\n    int size;\r\n    ListNode head;\r\n    public MyLinkedList() {\r\n        size = 0;\r\n        head = new ListNode(0);\r\n    }\r\n    \r\n    public int get(int index) {\r\n        if(index < 0 || index > size-1){\r\n            return -1;\r\n        }\r\n        ListNode cur = head;\r\n        while(index > 0){\r\n            cur = cur.next;\r\n            index--;\r\n        }\r\n        return cur.val;\r\n    }\r\n    \r\n    public void addAtHead(int val) {\r\n        if(size == 0){\r\n            head.val = val;\r\n            size++;\r\n            return;\r\n        }\r\n        ListNode dummy = new ListNode(val);\r\n        dummy.next =head;\r\n        head = dummy;\r\n        size++;\r\n    }\r\n    \r\n    public void addAtTail(int val) {\r\n        if(size == 0){\r\n            addAtHead(val);\r\n            return;\r\n        }\r\n        ListNode cur = head;\r\n        while(cur.next != null){\r\n            cur = cur.next;\r\n        }\r\n        cur.next = new ListNode(val);\r\n        size++;\r\n    }\r\n    \r\n    public void addAtIndex(int index, int val) {\r\n        ListNode dummy = new ListNode(0);\r\n        dummy.next =head;\r\n        ListNode cur = dummy;\r\n        if(index == size){\r\n            addAtTail(val);\r\n        } else if(index > size){\r\n        } else{\r\n            while(index > 0){\r\n                cur = cur.next;\r\n                index--;\r\n            }\r\n            ListNode temp = new ListNode(val);\r\n            temp.next = cur.next;\r\n            cur.next = temp;\r\n            size++;\r\n        }\r\n        head = dummy.next;\r\n\r\n    }\r\n    \r\n    public void deleteAtIndex(int index) {\r\n        if(index < 0 || index > size-1){\r\n            return;\r\n        }\r\n        ListNode dummy = new ListNode(0);\r\n        dummy.next = head;\r\n        ListNode cur = dummy;\r\n\r\n        while(index > 0){\r\n            cur = cur.next;\r\n            index--;\r\n        }\r\n        cur.next = cur.next.next;\r\n        head = dummy.next;\r\n        size--;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"//\u53cc\u94fe\u8868\r\nclass ListNode{\r\n    int val;\r\n    ListNode next,prev;\r\n    ListNode(){}\r\n    ListNode(int val){\r\n        this.val = val;\r\n    }\r\n    ListNode(int val,ListNode prev,ListNode next){\r\n        this.val = val;\r\n        this.next = next;\r\n        this.prev = prev;\r\n    }\r\n}\r\nclass MyLinkedList {\r\n    int size;\r\n    ListNode head,tail;\r\n\r\n    public MyLinkedList() {\r\n        size = 0;\r\n        head = new ListNode(0);\r\n        tail = new ListNode(0);\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n    \r\n    public int get(int index) {\r\n        if(index < 0 || index > size-1){\r\n            return -1;\r\n        }\r\n        ListNode cur = this.head;\r\n        if(index < size/2){\r\n\r\n            for(int i = 0;i <= index;i++){\r\n                cur = cur.next;\r\n            }\r\n        }else{\r\n            cur = this.tail;\r\n            for(int i = size;i > index;i--){\r\n                cur = cur.prev;\r\n            }\r\n            \r\n        }\r\n        return cur.val;\r\n    }\r\n    \r\n    public void addAtHead(int val) {\r\n        addAtIndex(0,val);\r\n    }\r\n    \r\n    public void addAtTail(int val) {\r\n        addAtIndex(size,val);\r\n    }\r\n    \r\n    public void addAtIndex(int index, int val) {\r\n        if(index < 0 || index > size){\r\n            return;\r\n        }\r\n        ListNode cur = this.head;\r\n        for(int i = 0;i < index;i++){\r\n            cur = cur.next;\r\n        }\r\n        ListNode temp = new ListNode(val);\r\n        cur.next.prev = temp;\r\n        temp.prev = cur;\r\n        temp.next = cur.next;\r\n        cur.next = temp;\r\n        size++;\r\n\r\n    }\r\n    \r\n    public void deleteAtIndex(int index) {\r\n        if(index < 0 || index > size-1){\r\n            return;\r\n        }\r\n        ListNode cur = this.head;\r\n        for(int i = 0;i < index;i++){\r\n            cur = cur.next;\r\n        }\r\n        cur.next.next.prev = cur;\r\n        cur.next = cur.next.next;\r\n        size--;\r\n    }\r\n}\r\n\n"})}),"\n",(0,t.jsx)(e.h2,{id:"206\u53cd\u8f6c\u94fe\u8868",children:"206.\u53cd\u8f6c\u94fe\u8868"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/reverse-linked-list/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,t.jsx)(e.p,{children:"\u9898\u610f\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL"}),"\n",(0,t.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"//\u53cc\u6307\u9488\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode reverseList(ListNode head) {\r\n        ListNode first = head;\r\n        ListNode second = null;\r\n        ListNode pre = null;\r\n        while(first != null){\r\n            second = first.next;\r\n            first.next = pre;\r\n            pre = first;\r\n            first = second;\r\n        }\r\n        return pre;\r\n    }\r\n}\r\n\r\n//\u9012\u5f52\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode reverseList(ListNode head) {\r\n        return reverse(null,head);\r\n    }\r\n    public ListNode reverse(ListNode pre,ListNode first){\r\n        if(first == null){\r\n            return pre;\r\n        }\r\n        \r\n        ListNode second = first.next;\r\n        first.next = pre;\r\n        return reverse(first,second);\r\n        \r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// \u4ece\u540e\u5411\u524d\u9012\u5f52\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode reverseList(ListNode head) {\r\n        if(head == null || head.next == null) return head;\r\n\r\n        ListNode last = reverseList(head.next);//\u7ffb\u8f6c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u4e4b\u540e\u7684\u8282\u70b9\r\n        head.next.next = head;\r\n        head.next = null;\r\n        return last;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",children:"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/swap-nodes-in-pairs/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,t.jsx)(e.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode swapPairs(ListNode head) {\r\n        if(head == null || head.next == null) return head;\r\n        ListNode cur = head;\r\n        head = cur.next;\r\n        ListNode temp = null;\r\n        ListNode pre = null;\r\n        while(cur != null && cur.next != null){\r\n            if(pre != null){\r\n                pre.next = cur.next;//\u6b65\u9aa4\u4e00\uff0c\u53ef\u4ee5\u4f7f\u7528\u865a\u62df\u5934\u8282\u70b9\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u5224\u65ad\r\n            }\r\n            temp = cur.next.next;\r\n            cur.next.next = cur;//\u6b65\u9aa4\u4e8c\r\n            cur.next = temp;//\u6b65\u9aa4\u4e09\uff0c\u4ea4\u6362\u6b65\u9aa4\u4e8c\u548c\u4e09\u53ef\u4ee5\u4e0d\u7528\u52a0temp\u8282\u70b9\r\n            pre = cur;\r\n            cur = temp;\r\n        }\r\n        return head;\r\n    }\r\n}\r\n//\u9012\u5f52\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode swapPairs(ListNode head) {\r\n        if(head == null || head.next == null) return head;\r\n        ListNode cur = head;\r\n        head = cur.next;\r\n        ListNode last = swapPairs(cur.next.next);\r\n        cur.next.next = cur;\r\n        cur.next = last;\r\n        return head;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"19\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9",children:"19.\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,t.jsx)(e.p,{children:"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u8fdb\u9636\uff1a\u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f"}),"\n",(0,t.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode removeNthFromEnd(ListNode head, int n) {\r\n        ListNode dummy = new ListNode(0);\r\n        dummy.next = head;\r\n        ListNode cur = dummy;\r\n        ListNode temp = cur;\r\n\r\n        for(int i = 0;i < n;i++){\r\n            temp = temp.next;\r\n        }\r\n        while(temp.next != null){\r\n            cur = cur.next;\r\n            temp = temp.next;\r\n        }\r\n        cur.next = cur.next.next;\r\n        return dummy.next;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u9762\u8bd5\u9898-0207-\u94fe\u8868\u76f8\u4ea4",children:"\u9762\u8bd5\u9898 02.07. \u94fe\u8868\u76f8\u4ea4"}),"\n",(0,t.jsx)(e.p,{children:"\u540c\uff1a160.\u94fe\u8868\u76f8\u4ea4"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,t.jsx)(e.p,{children:"\u7ed9\u4f60\u4e24\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 headA \u548c headB \uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de null \u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        ListNode A = headA;\r\n        ListNode B = headB;\r\n        int cur = 1;\r\n        int size = 0;\r\n        ListNode temp = null;\r\n        while(A != null){\r\n            size++;\r\n            A = A.next;\r\n        }\r\n        while(cur <= size && B != null){\r\n            A = headA;\r\n            B = headB;\r\n            for(int i = 0;i < size - cur;i++){\r\n                A = A.next;\r\n            }\r\n            while(B != null){\r\n                if(B == A){\r\n                    cur++;\r\n                    temp = A;\r\n                    break;\r\n                }\r\n                B = B.next;\r\n            }\r\n        }\r\n        return temp;\r\n    }\r\n}//\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u540c\u6b65\u79fb\u52a8\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"//\u5408\u5e76\u94fe\u8868\u5b9e\u73b0\u540c\u6b65\u79fb\u52a8\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        ListNode A = headA;\r\n        ListNode B = headB;\r\n        while(A != B){\r\n            if(A == null){\r\n                A = headB;\r\n            } else{\r\n                A = A.next;\r\n            }\r\n            if(B == null){\r\n                B = headA;\r\n            } else{\r\n                B = B.next;\r\n            }\r\n        }\r\n        return A;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"142\u73af\u5f62\u94fe\u8868ii",children:"142.\u73af\u5f62\u94fe\u8868II"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://leetcode.cn/problems/linked-list-cycle-ii/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,t.jsx)(e.p,{children:"\u9898\u610f\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002 \u5982\u679c pos \u662f -1\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u8bf4\u660e"}),"\uff1a\u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002"]}),"\n",(0,t.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode detectCycle(ListNode head) {\r\n        ListNode fast = head;\r\n        ListNode slow = head;\r\n        boolean iscircle = false;\r\n        while(fast != null && fast.next != null && slow.next != null){\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n            if(fast == slow){\r\n                iscircle =true;\r\n                break;\r\n            }\r\n        }\r\n        if(iscircle == false) return null;\r\n        ListNode temp = fast;\r\n        fast = fast.next;\r\n        slow =head;\r\n        while(temp != slow){\r\n            while(temp != fast){\r\n                if(fast ==slow){\r\n                    return slow;\r\n                } else{\r\n                    fast = fast.next;\r\n                }\r\n            }\r\n            fast = fast.next;\r\n            slow = slow.next;\r\n        }\r\n        return slow;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"//\u79d2\u89e3\r\n/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode detectCycle(ListNode head) {\r\n        ListNode fast = head;\r\n        ListNode slow = head;\r\n        while(fast != null && fast.next != null){\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n            if(fast == slow){\r\n                slow = head;\r\n                while(slow != fast){\r\n                    slow = slow.next;\r\n                    fast = fast.next;\r\n                }\r\n                return slow;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{alt:"img",src:r(17220).A+"",width:"1269",height:"845"})})]})}function x(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},17220:(n,e,r)=>{r.d(e,{A:()=>i});const i=r.p+"assets/images/\u94fe\u8868\u603b\u7ed3-9f254adeb57ea998f19e78342da7668d.png"},28453:(n,e,r)=>{r.d(e,{R:()=>l,x:()=>d});var i=r(96540);const t={},s=i.createContext(t);function l(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);